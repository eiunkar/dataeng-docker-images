NY_DOCKER_REGISTRY = "registry-ds.newyorker.de:8443"
def IMAGES = [
  "nyer-airflow-miniconda": [
      "image_name": "${NY_DOCKER_REGISTRY}/nyer-airflow-miniconda",
      "image_tag": "1.10.2",
      "build_context": "./airflow-miniconda",
      "dockerfile": "./airflow-miniconda/Dockerfile",
  ],
  "nyer-dataeng-airflow-miniconda": [
      "image_name": "${NY_DOCKER_REGISTRY}/nyer-dataeng-airflow-miniconda",
      "image_tag": "1.10.2",
      "build_context": "./dataeng-airflow-miniconda",
      "dockerfile": "./dataeng-airflow-miniconda/Dockerfile",
  ],
]
def PUSHTAGS = []
for (def key in IMAGES.keySet()) {
  PUSHTAGS.add("${IMAGES[key]["image_name"]}:${IMAGES[key]["image_tag"]}")
}

def createDockerBuild(docker){
    container('dind') {
        sh """
            cp LICENSE ${docker["build_context"]}
            docker build \
                -t ${docker["image_name"]}:${docker["image_tag"]} \
                -f ${docker["dockerfile"]} ${docker["build_context"]}
        """
    }

}

def pushImages(tags) {
    for (int i = 0; i < tags.size(); i++) {
      sh "docker push ${tags[i]}"
    }
}

pipeline {
    agent {
        kubernetes {
            cloud 'k8s-dev'
            yamlFile 'ci/jenkinsPod.yaml'
        }
    }
    environment {
        REGISTRY_CREDENTIALS = "nexus_docker_k8s_credentials"
        PUSH_IMAGES = "${env.BRANCH_NAME ==~ /production|master|test/ ? "true" : "false" }"
    }
    stages {

        stage('Prepare') {
            steps {
                slackSend color: "warning", message: "Started: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}console|Open>)"
            }
        }

        stage('Build nyer-airflow-miniconda') {
            steps {
                script{
                    createDockerBuild(IMAGES["nyer-airflow-miniconda"])
                }
            }
        }
        stage('Build nyer-dataeng-airflow-miniconda') {
            steps {
                script{
                    createDockerBuild(IMAGES["nyer-dataeng-airflow-miniconda"])
                }
            }
        }
        stage('Push nyer-airflow-miniconda') {
            when {environment name: 'PUSH_IMAGES', value: 'true'}
            steps {
                    container('dind'){
                        script {
                            docker.withRegistry("https://${NY_DOCKER_REGISTRY}", "${REGISTRY_CREDENTIALS}") {
                                pushImages(PUSHTAGS)
                            }
                        }
                    }
                }
        }
    }
    post {
        success {
            slackSend color: "good", message: "Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
        }
        failure {
            slackSend color: "bad", message: "Failure: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
        }
    }


}
